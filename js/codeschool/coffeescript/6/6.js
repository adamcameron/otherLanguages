// Generated by CoffeeScript 1.7.1
(function() {
  var Coffee, DrinkLink, MaxgoodHouse, SelectFlights, coffee, french, maxgoodHouse, selectFlights,
    __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
    __bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; };

  coffee = {
    name: "French",
    strength: 1,
    brew: function() {
      return alert("brewing " + this.name);
    },
    pour: function(amount) {
      if (amount == null) {
        amount = 1;
      }
      if (amount === 1) {
        return "poured a single cup";
      } else {
        return "Poured " + amount + " cups";
      }
    }
  };

  Coffee = (function() {
    function Coffee(name, strength) {
      if (strength == null) {
        strength = 1;
      }
      this.name = name;
      this.strength = strength;
    }

    return Coffee;

  })();

  Coffee = (function() {
    function Coffee(name, strength) {
      this.name = name;
      this.strength = strength != null ? strength : 1;
    }

    Coffee.prototype.brew = function() {
      return alert("brewing " + this.name);
    };

    Coffee.prototype.pour = function(amount) {
      if (amount == null) {
        amount = 1;
      }
      if (amount === 1) {
        return "poured a single cup";
      } else {
        return "Poured " + amount + " cups";
      }
    };

    return Coffee;

  })();

  french = new Coffee("French", 2);

  MaxgoodHouse = (function(_super) {
    __extends(MaxgoodHouse, _super);

    function MaxgoodHouse(name, strength) {
      this.name = name;
      this.strength = strength != null ? strength : 0;
      this.branch = "Maxgood House";
    }

    MaxgoodHouse.prototype.brew = function() {
      return alert("brewing " + brand + " " + this.name);
    };

    MaxgoodHouse.prototype.pour = function(amount) {
      if (amount == null) {
        amount = 1;
      }
      return "" + (MaxgoodHouse.__super__.pour.call(this, amount)) + ", but it sucks";
    };

    return MaxgoodHouse;

  })(Coffee);

  maxgoodHouse = new MaxgoodHouse("bleah");

  Coffee = (function() {
    function Coffee(name, strength, inventory) {
      this.name = name;
      this.strength = strength != null ? strength : 1;
      this.inventory = inventory != null ? inventory : 0;
    }

    Coffee.prototype.pourClick = function() {
      return $("#pour-" + this.name).click(event)((function(_this) {
        return function() {
          if (_this.inventory !== 0) {
            _this.inventory -= 1;
            return alert("Poured a cup of " + _this.name);
          }
        };
      })(this));
    };

    return Coffee;

  })();

  SelectFlights = (function() {
    function SelectFlights(fetchingFlights) {
      this.fetchingFlights = fetchingFlights != null ? fetchingFlights : null;
      this.changeTab = __bind(this.changeTab, this);
      $("#tabs ul li a").bind({
        click: this.changeTab
      });
      $("#tabs #error a").click((function(_this) {
        return function(event) {
          event.preventDefault();
          return _this.showFlights($("#tabs li a.active").attr("href"));
        };
      })(this));
    }

    SelectFlights.prototype.showFlights = function(activeDiv) {};

    SelectFlights.prototype.changeTab = function(event) {};

    return SelectFlights;

  })();

  selectFlights = new SelectFlights();

  coffee = {
    name: 'Russian',
    level: 2,
    isRussian: function() {
      return this.name === 'Russian';
    }
  };

  Coffee = (function() {
    function Coffee(name, level) {
      this.name = name;
      this.level = level;
    }

    Coffee.prototype.isRussian = function() {
      return this.name === 'Russian';
    };

    return Coffee;

  })();

  coffee = new Coffee("Zachary", 3);

  Coffee = (function() {
    function Coffee(name, level) {
      this.name = name;
      this.level = level || 0;
    }

    Coffee.prototype.isRussian = function() {
      return this.name === 'Russian';
    };

    return Coffee;

  })();

  Coffee = (function() {
    function Coffee(name, level) {
      this.name = name;
      this.level = level != null ? level : 0;
    }

    Coffee.prototype.isRussian = function() {
      return this.name === 'Russian';
    };

    return Coffee;

  })();

  Coffee = (function() {
    function Coffee(name, level) {
      this.name = name;
      this.level = level != null ? level : 0;
    }

    return Coffee;

  })();

  Coffee = (function(_super) {
    __extends(Coffee, _super);

    function Coffee(name, level) {
      this.name = name;
      this.level = level != null ? level : 0;
    }

    Coffee.prototype.serve = function(sleeve) {
      if (sleeve == null) {
        sleeve = false;
      }
      if (this.sleeve != null) {
        return false;
      } else {
        return Coffee.__super__.serve.apply(this, arguments);
      }
    };

    return Coffee;

  })(Drink);

  DrinkLink = (function() {
    function DrinkLink() {}

    DrinkLink.prototype.watchClick = function() {
      return $("a").click(function(event) {
        return $(this).css('color', '#F00');
      });
    };

    return DrinkLink;

  })();

  DrinkLink = (function() {
    function DrinkLink(linkClicked) {
      this.linkClicked = linkClicked != null ? linkClicked : false;
    }

    DrinkLink.prototype.watchClick = function() {
      return $('.drink a').click(function(event) {
        $(event.target).css('color', '#F00');
        return this.linkClicked = true;
      });
    };

    return DrinkLink;

  })();

  DrinkLink = (function() {
    function DrinkLink(linkClicked) {
      this.linkClicked = linkClicked != null ? linkClicked : false;
    }

    DrinkLink.prototype.watchClick = function() {
      return $('.drink a').click((function(_this) {
        return function(event) {
          $(event.target).css('color', '#F00');
          return _this.linkClicked = true;
        };
      })(this));
    };

    return DrinkLink;

  })();

}).call(this);
